/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.10.v20180503
 * Generated at: 2018-11-03 05:22:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.vithu.uscms.session.CurrentUser;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("jar:file:/C:/Users/THINKPAD/.m2/repository/org/springframework/spring-webmvc/5.0.2.RELEASE/spring-webmvc-5.0.2.RELEASE.jar!/META-INF/spring.tld", Long.valueOf(1511758628000L));
    _jspx_dependants.put("jar:file:/C:/Users/THINKPAD/.m2/repository/javax/servlet/jstl/1.2/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153365282000L));
    _jspx_dependants.put("file:/C:/Users/THINKPAD/.m2/repository/org/springframework/spring-webmvc/5.0.2.RELEASE/spring-webmvc-5.0.2.RELEASE.jar", Long.valueOf(1540711824235L));
    _jspx_dependants.put("file:/C:/Users/THINKPAD/.m2/repository/javax/servlet/jstl/1.2/jstl-1.2.jar", Long.valueOf(1540711797201L));
    _jspx_dependants.put("/WEB-INF/jsp/user/../../layouts/taglib.jsp", Long.valueOf(1524938852000L));
    _jspx_dependants.put("jar:file:/C:/Users/THINKPAD/.m2/repository/org/springframework/spring-webmvc/5.0.2.RELEASE/spring-webmvc-5.0.2.RELEASE.jar!/META-INF/spring-form.tld", Long.valueOf(1511758628000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.vithu.uscms.session.CurrentUser");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- /** -->\r\n");
      out.write("<!--  * @author M.Vithusanth -->\r\n");
      out.write("<!--  * @CreatedOn 20th April 2018 -->\r\n");
      out.write("<!--  * @Purpose Maintaining libs -->\r\n");
      out.write("<!--  */ -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("<form  role=\"form\" method=\"post\" onsubmit=\"return logIn(this);\">\r\n");
      out.write("\t<div class=\"form-group has-feedback\">\r\n");
      out.write("\t\t<input type=\"text\" name=\"username\" id=\"user-name\" class=\"form-control\"\r\n");
      out.write("\t\t\tplaceholder=\"username\" /> <span\r\n");
      out.write("\t\t\tclass=\"glyphicon glyphicon-envelope form-control-feedback\"></span>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"form-group has-feedback\">\r\n");
      out.write("\t\t<input type=\"password\" name=\"password\" id=\"password\"\r\n");
      out.write("\t\t\tclass=\"form-control\" placeholder=\"Password\" /> <span\r\n");
      out.write("\t\t\tclass=\"glyphicon glyphicon-lock form-control-feedback\"></span>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"row\">\r\n");
      out.write("\t\t<!-- /.col -->\r\n");
      out.write("\t\t<div >\r\n");
      out.write("\t\t\t<input class=\"btn btn-primary btn-block \" style=\"width:325px;margin:0px 15px 0px 15px; background-color:#80007094;\" name=\"submit\"\r\n");
      out.write("\t\t\t\ttype=\"submit\" value=\"Sign In\"  />\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- /.col -->\r\n");
      out.write("\t</div>\r\n");
      out.write("</form>\r\n");
      out.write("\t\r\n");
      out.write("<script>\r\n");
      out.write("\tfunction logIn(form) {\r\n");
      out.write("\t\ttry {\r\n");
      out.write("\t\t\tif ($(\"#user-name\").val().trim() == \"\") {\r\n");
      out.write("\t\t\t\talertMessage(\"User name can not be empty\", 'error');\r\n");
      out.write("\t\t\t} else if ($(\"#password\").val().trim() == \"\") {\r\n");
      out.write("\t\t\t\talertMessage(\"Password can not be empty\", 'error');\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tvar user = {};\r\n");
      out.write("\t\t\t\tuser.userName = $(\"#user-name\").val();\r\n");
      out.write("\t\t\t\tuser.password = $(\"#password\").val();\r\n");
      out.write("\t\t\t\tconsole.log(user);\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\ttype : 'POST',\r\n");
      out.write("\t\t\t\t\turl : 'http://127.0.0.1:8080/doLogin',\r\n");
      out.write("\t\t\t\t\tdata : {\r\n");
      out.write("\t\t\t\t\t\tdata : JSON.stringify(user)\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tsuccess : function(res) {\r\n");
      out.write("\t\t\t\t\t\tres = JSON.parse(res)\r\n");
      out.write("\t\t\t\t\t\tconsole.log(res);\r\n");
      out.write("\t\t\t\t\t\tconsole.log(");
      out.print( session.getAttribute("hi") );
      out.write(");\r\n");
      out.write("\t\t\t\t\t\tif (res.status == false) {\r\n");
      out.write("\t\t\t\t\t\t\talertMessage(res.description, 'error');\r\n");
      out.write("\t\t\t\t\t\t} else if (res.status == true) {\r\n");
      out.write("\t\t\t\t\t\t\talertMessage(res.description, 'success');\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tsetTimeout(function() {\r\n");
      out.write("\t\t\t\t\t\t\tif (res.status == true) {\r\n");
      out.write("\t\t\t\t\t\t\t\twindow.location.href = \"/home\";\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}, 500);\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror : function(xhr, textStatus, errorThrown) {\r\n");
      out.write("\t\t\t\t\t\tconsole.log(xhr);\r\n");
      out.write("\t\t\t\t\t\talert(\"error\");\r\n");
      out.write("\t\t\t\t\t\tconsole.log(errorThrown);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t} catch (err) {\r\n");
      out.write("\t\t\talert(err);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t/** ***************************************************************************** **/\r\n");
      out.write("\t/** ALERT MESSAGE FUNCTIONS\t\t\t\t\t\t\t\t\t\t\t\t          **/\r\n");
      out.write("\t/** ***************************************************************************** **/\r\n");
      out.write("\r\n");
      out.write("\tfunction alertMessage(msg, type) {\r\n");
      out.write("\t\t$.notify(msg, {\r\n");
      out.write("\t\t\tclickToHide : true,\r\n");
      out.write("\t\t\tglobalPosition : 'top right',\r\n");
      out.write("\t\t\tstyle : 'bootstrap',\r\n");
      out.write("\t\t\tclassName : type,\r\n");
      out.write("\t\t\tshowAnimation : 'slideDown',\r\n");
      out.write("\t\t\tshowDuration : 400,\r\n");
      out.write("\t\t\thideAnimation : 'slideUp',\r\n");
      out.write("\t\t\thideDuration : 200\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
